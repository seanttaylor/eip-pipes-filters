version: "3.8"

services:
  #localstack:
  #  container_name: "${LOCALSTACK_DOCKER_NAME-localstack_main}"
  #  image: localstack/localstack
    # network_mode: bridge
  #  ports:
  #    - "127.0.0.1:53:53"                # only required for Pro (DNS)
  #    - "127.0.0.1:53:53/udp"            # only required for Pro (DNS)
  #    - "127.0.0.1:443:443"              # only required for Pro (LocalStack HTTPS Edge Proxy)
  #    - "127.0.0.1:4510-4559:4510-4559"  # external service port range
  #    - "127.0.0.1:4566:4566"            # LocalStack Edge Proxy
  #  environment:
  #    - SERVICES=cloudwatch,iam,lambda,logs,s3,sqs,secretsmanager,ssm
  #    - DEBUG=${DEBUG-}
  #    - DATA_DIR=${DATA_DIR-}
  #    - LAMBDA_EXECUTOR=local
  #    - LOCALSTACK_API_KEY=${LOCALSTACK_API_KEY-}  # only required for Pro
  #    - HOST_TMP_FOLDER=/tmp/localstack
  #    - DOCKER_HOST=unix:///var/run/docker.sock
  #  volumes:
  #    - "/tmp/localstack:/tmp/localstack"
  #    - "/var/run/docker.sock:/var/run/docker.sock"
  authz_service:
    container_name: "authz_service"
    image: authz_service:0.0.1
    environment:
      - APP_NAME: authz_filter
      - APP_VERSION: "0.0.1"
      - KAFKA_BOOTSTRAP_SERVER: kafka:9092
      - KAFKA_CLIENT_ID: froyo
      - KAFKA_GROUP_ID: froyo_group
      #- AWS_REGION=us-east-1
      #- AWS_ENDPOINT_URL=http://localstack_main:4566
      #- AWS_ACCESS_KEY_ID=foo
      #- AWS_SECRET_ACCESS_KEY=bar
    volumes:
      - ./:/src
    networks:
      - shared_network
    depends_on:
      - kafka
    restart: always
  commit_service:
    container_name: "commit_service"
    image: commit_service:0.0.1
    environment:
      - APP_NAME: commit_filter
      - APP_VERSION: "0.0.1"
      - KAFKA_BOOTSTRAP_SERVER: kafka:9092
      - KAFKA_CLIENT_ID: custard
      - KAFKA_GROUP_ID: custard_group
      - ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      #- AWS_REGION=us-east-1
      #- AWS_ENDPOINT_URL=http://localstack_main:4566
      #- AWS_ACCESS_KEY_ID=foo
      #- AWS_SECRET_ACCESS_KEY=bar
    volumes:
      - ./:/src
    networks:
      - shared_network
    depends_on:
      - kafka
      - mongo
  decrypt_service:
    container_name: "decrypt_service"
    image: decrypt_service:0.0.1
    environment:
      - APP_NAME: decrypt_filter
      - APP_VERSION: "0.0.1"
      - ENCRYPTION_ALGORITHM: aes-256-ctr
      - ENCRYPTION_KEY: vOVH6sdmpNWjRRIqCc7rdxs01lwHzfr3
      - KAFKA_BOOTSTRAP_SERVER: kafka:9092
      - KAFKA_CLIENT_ID: softserve
      - KAFKA_GROUP_ID: softserve_group
      #- AWS_REGION=us-east-1
      #- AWS_ENDPOINT_URL=http://localstack_main:4566
      #- AWS_ACCESS_KEY_ID=foo
      #- AWS_SECRET_ACCESS_KEY=bar
    volumes:
      - ./:/src
    depends_on:
      - kafka
    networks:
      - shared_network
    restart: always
  ingress_service:
    container_name: "ingress_service"
    image: ingress_service:0.0.1
    environment:
      - APP_NAME: ice_cream_pipeline
      - APP_VERSION: "0.0.1"
      - ENCRYPTION_ALGORITHM: aes-256-ctr
      - ENCRYPTION_KEY: vOVH6sdmpNWjRRIqCc7rdxs01lwHzfr3
      - KAFKA_BOOTSTRAP_SERVER: kafka:9092
      - KAFKA_CLIENT_ID: sherbert
      - KAFKA_GROUP_ID: sherbert_group
      #- AWS_REGION=us-east-1
      #- AWS_ENDPOINT_URL=http://localstack_main:4566
      #- AWS_ACCESS_KEY_ID=foo
      #- AWS_SECRET_ACCESS_KEY=bar
    volumes:
      - ./:/src
    depends_on:
      - kafka
    networks:
      - shared_network
    restart: always
  dedupe_service:
    container_name: "dedupe_service"
    image: dedupe_service:0.0.1
    environment:
      - APP_NAME: dedupe_filter
      - APP_VERSION: "0.0.1"
      - KAFKA_BOOTSTRAP_SERVER: kafka:9092
      - KAFKA_CLIENT_ID: gelato
      - KAFKA_GROUP_ID: gelato_group
      #- AWS_REGION=us-east-1
      #- AWS_ENDPOINT_URL=http://localstack_main:4566
      #- AWS_ACCESS_KEY_ID=foo
      #- AWS_SECRET_ACCESS_KEY=bar
    volumes:
      - ./:/src
    depends_on:
      - kafka
    networks:
      - shared_network
    restart: always
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    networks:
      - shared_network
  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    depends_on: 
      - zookeeper
    ports:
      - 9092:9092
    environment: 
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "ingress:1:1,decrypt-authz:1:1,authz-dedupe:1:1,dedupe:commit:1:1"
    networks:
      - shared_network    
  kowl:
    image: quay.io/cloudhut/kowl:v1.3.1
    container_name: kowl
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKERS=kafka:9092
    networks:
      - shared_network
  mongo:
    image: mongo
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: sorbet
    networks:
      - shared_network
  mongo-express:
    image: mongo-express
    container_name: mongodb_ui_client
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongodb:27017/
    networks:
      - shared_network
    depends_on:
      - mongo
networks:
  shared_network: